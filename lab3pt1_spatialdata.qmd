---
title: "ESM 244 Lab 3 pt. 1: working with spatial data"
author: "Caroline Edmonds"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
    embed-resources: true
editor: visual
execute: 
  echo: true
  message: false
  warning: false
---

```{r setup}
library(tidyverse)
library(janitor)
library(here)
library(broom)

# Spatial Packages
library(sf)
library(tmap)
```

## Read in our data.

```{r}
ca_counties_row_sf <- read_sf(here('data', 'ca_counties', 'CA_Counties_TIGER2016.shp'))
```

```{r}
#create new sf dataframe
ca_counties_sf <- ca_counties_row_sf |>
  clean_names() |>
  mutate(land_km2 = aland/1e6) |>
  select(county = name, land_km2)

#geometry is a sticky variable and will automatically keep that column

#to get rid of
ca_counties_df <- ca_counties_row_sf |>
  as.data.frame() |>
  select(-geometry)
```

## Check the coordinate reference system.

```{r}
ca_counties_sf |> st_crs()
```

## Explore the data visually.

```{r}
plot(ca_counties_sf |> select(land_km2))
```

```{r}
#plot in ggplot

ggplot() +
  geom_sf(data = ca_counties_sf, aes(fill = land_km2), color = 'white', size = 0.1) + 
  theme_void()+ #gets ride of lat and long on map
  scale_fill_gradientn(colors = c('cyan', 'blue', 'purple')) 
```

## Read in records of Red Sesbania (invasive plant)

```{r}
sesbania_sf <- read_sf(here("data/red_sesbania/ds80_for_lab.gpkg")) |> clean_names()

sesbania_sf|> st_crs()  #different coordinate reference systems

plot(sesbania_sf |> select(id))
```

## The analysis.

Let's find the count of red sesbania observed locations in this dataset, by county, and then create a map of all CA counties using the fill color to indicate red sesbania counts.

### Pseudocode

-   match projections/coordinate reference systems to counties

-   combine datasets

-   plot datasets together

-   spatial_join - matches up dataset

-   group by county

-   then map by gradient of amount red sesbania counts

## Transform the CRS so records match counties

```{r}
sesbania_3857_sf <- st_transform(sesbania_sf, 3857) #know EPSG code way

sesbania_3857_2_sf <- st_transform(sesbania_sf, st_crs(ca_counties_sf)) #find it from the other dataset
```

## Let's plot the two together.

```{r}
ggplot() +
  geom_sf(data = ca_counties_sf) +
  geom_sf(data = sesbania_3857_sf, size = 1, color = 'red')
```

### Spatial Join

```{r}
ca_sesb_sf <- st_join(ca_counties_sf, sesbania_3857_sf) #kept polygons

sesb_ca_sf <- st_join(sesbania_3857_sf, ca_counties_sf) #kept points

#keeps geoms of whatever is first
```

## Summarize by county.

```{r}
sesb_counts_sf <- ca_sesb_sf |>
  group_by(county) |>
  summarize(n_records = sum(!is.na(id))) #no not count N/A as a value, if I do not this then will count N/A as 1 instead of zero

ggplot()+
  geom_sf(data = sesb_counts_sf, aes(fill = n_records), color = 'grey90', size = 1)+ 
  scale_fill_gradientn(colors = c("grey", "green","blue"))+
  theme_minimal()+
  labs(fill = "Number of S. punicea records")
  
```

## Next Analysis:

For the county with the greatest number of red sesbania records, make a map of those locations and where they occur within the county.

### Pseudocode:

-   find the biggest county

-   filter/select the largest county

-   take subset of other locations information - watershed or location

-   color by count

-   map it!

-   maybe use other other spatual join dataset - sesb_ca_sf

```{r}
#can find the amax amount by just viewing dataset (do below for actual code)

county_max <- sesb_counts_sf |>
  filter(n_records == max(n_records)) |>
  pull(county)

#slice_max(n_records, 1) another option

```

```{r}
solano_sesb_sf <- sesb_ca_sf |>
  filter(county == county_max) #if have more than with the same # use %in% ---

solano_sf <- ca_counties_sf |>
  filter(county %in% county_max)

ggplot()+
  geom_sf(data = solano_sf)+
  geom_sf(data = solano_sesb_sf, color = 'red')
```

# Making an interactive map with 'tmap'

```{r}
# | eval: false #do not want to embed this into html otherwise will be 110 mb
#| include: true

##Set the viewing mode to interactive

tmap_mode(mode='view')

```

```{r}
tm_shape(ca_counties_sf) +
  tm_fill("land_km2", palette = "BuGn") +
  tm_shape(sesbania_sf) +
  tm_dots()
```
